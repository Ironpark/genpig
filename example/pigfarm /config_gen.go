// Code generated by "genpig"; DO NOT EDIT.
package pigfarm

import (
	"sync"

	"encoding/json"
	"github.com/ironpark/genpig"
	"os"
)

var pggInstance *Piggy
var pggOnce sync.Once

var _ json.Marshaler = (*Piggy)(nil)
var _ json.Unmarshaler = (*Piggy)(nil)

type Piggy struct {
	lock sync.RWMutex
	cfg  Config
}

func GetInstance() *Piggy {
	pggOnce.Do(func() {
		pggInstance = &Piggy{}
	})
	return pggInstance
}

func (pig *Piggy) Database() struct {
	Host     string `env:"DB_SERVER_IP" json:"ip"`
	Port     int    `env:"DB_PORT" json:"port"`
	User     string `env:"DB_USER" json:"user"`
	Password string `env:"DB_PW" json:"password"`
} {
	pig.lock.RLock()
	defer pig.lock.RUnlock()
	return pig.cfg.Database
}

func (pig *Piggy) Server() struct {
	Host string `json:"ip" env:"SERVER_IP"`
	Port int    `json:"port" env:"PORT"`
} {
	pig.lock.RLock()
	defer pig.lock.RUnlock()
	return pig.cfg.Server
}

func (pig *Piggy) Snapshot() Config {
	pig.lock.RLock()
	defer pig.lock.RUnlock()
	return pig.cfg
}

func (pig *Piggy) MarshalJSON() ([]byte, error) {
	return json.Marshal(pig.cfg)
}

func (pig *Piggy) UnmarshalJSON(bytes []byte) error {
	return json.Unmarshal(bytes, &pig.cfg)
}

func (pig *Piggy) Load() {
	searchDirs := []string{"$HOME", ".", "./config"}
	fileNames := []string{"myconfig"}
	// Default Values
	cfgJSON := Config{}
	// Json config file load
	genpig.LoadJsonConfig(searchDirs, fileNames, &cfgJSON)
	pig.cfg.Database.Host = genpig.Merge(0
		string(os.Getenv("DB_SERVER_IP")),
		cfgJSON.Database.Host,
	)
	pig.cfg.Database.Port = genpig.Merge(int(genpig.EnvInt("DB_PORT")), cfgJSON.Database.Port)
	pig.cfg.Database.User = genpig.Merge(string(os.Getenv("DB_USER")), cfgJSON.Database.User)
	pig.cfg.Database.Password = genpig.Merge(string(os.Getenv("DB_PW")), cfgJSON.Database.Password)
	pig.cfg.Server.Host = genpig.Merge(cfgJSON.Server.Host, string(os.Getenv("SERVER_IP")))
	pig.cfg.Server.Port = genpig.Merge(cfgJSON.Server.Port, int(genpig.EnvInt("PORT")))
}
